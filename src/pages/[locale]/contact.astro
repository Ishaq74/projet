---
// Contact Page
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import { loadTranslations, t, locales } from '../../utils/i18n';
import type { Locale } from '../../types/i18n';

export async function getStaticPaths() {
  return locales.map((localeConfig) => ({
    params: { locale: localeConfig.code },
  }));
}

const { locale } = Astro.params;
const translations = await loadTranslations(locale as Locale);

const title = `${t(translations, 'nav.contact')} - Platform`;
const description = 'Get in touch with us. We\'d love to hear from you and answer any questions you might have.';
---

<Layout 
  title={title}
  description={description}
  locale={locale as Locale}
>
  <Navigation slot="header" locale={locale as Locale} currentPath="/contact" />
  
  <div class="container">
    <section class="contact-hero">
      <h1 class="page-title">{t(translations, 'nav.contact')}</h1>
      <p class="page-description">
        Get in touch with us. We'd love to hear from you and answer any questions you might have.
      </p>
    </section>
    
    <div class="contact-layout">
      <!-- Contact Form -->
      <div class="contact-form-section">
        <div class="card">
          <div class="card-body">
            <h2>Send us a message</h2>
            <form class="contact-form" action="#" method="post">
              <div class="form-row">
                <div class="form-group">
                  <label for="firstName" class="form-label">
                    {t(translations, 'form.firstName')} *
                  </label>
                  <input 
                    type="text" 
                    id="firstName" 
                    name="firstName"
                    class="input"
                    required
                    aria-describedby="firstName-error"
                  />
                  <span id="firstName-error" class="form-error" hidden>
                    {t(translations, 'form.required')}
                  </span>
                </div>
                
                <div class="form-group">
                  <label for="lastName" class="form-label">
                    {t(translations, 'form.lastName')} *
                  </label>
                  <input 
                    type="text" 
                    id="lastName" 
                    name="lastName"
                    class="input"
                    required
                    aria-describedby="lastName-error"
                  />
                  <span id="lastName-error" class="form-error" hidden>
                    {t(translations, 'form.required')}
                  </span>
                </div>
              </div>
              
              <div class="form-group">
                <label for="email" class="form-label">
                  {t(translations, 'form.email')} *
                </label>
                <input 
                  type="email" 
                  id="email" 
                  name="email"
                  class="input"
                  required
                  aria-describedby="email-error"
                />
                <span id="email-error" class="form-error" hidden>
                  {t(translations, 'form.required')}
                </span>
              </div>
              
              <div class="form-group">
                <label for="subject" class="form-label">
                  {t(translations, 'form.subject')} *
                </label>
                <input 
                  type="text" 
                  id="subject" 
                  name="subject"
                  class="input"
                  required
                  aria-describedby="subject-error"
                />
                <span id="subject-error" class="form-error" hidden>
                  {t(translations, 'form.required')}
                </span>
              </div>
              
              <div class="form-group">
                <label for="message" class="form-label">
                  {t(translations, 'form.message')} *
                </label>
                <textarea 
                  id="message" 
                  name="message"
                  class="textarea"
                  rows="6"
                  required
                  aria-describedby="message-error"
                ></textarea>
                <span id="message-error" class="form-error" hidden>
                  {t(translations, 'form.required')}
                </span>
              </div>
              
              <div class="form-actions">
                <button type="submit" class="btn btn-primary btn-lg">
                  {t(translations, 'common.submit')}
                </button>
                <button type="reset" class="btn btn-ghost btn-lg">
                  {t(translations, 'common.cancel')}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Contact Info -->
      <div class="contact-info">
        <div class="card">
          <div class="card-body">
            <h3>Contact Information</h3>
            <div class="contact-item">
              <div class="contact-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
                  <polyline points="22,6 12,13 2,6"/>
                </svg>
              </div>
              <div class="contact-details">
                <strong>Email</strong>
                <p>contact@platform.com</p>
              </div>
            </div>
            
            <div class="contact-item">
              <div class="contact-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/>
                </svg>
              </div>
              <div class="contact-details">
                <strong>Phone</strong>
                <p>+1 (555) 123-4567</p>
              </div>
            </div>
            
            <div class="contact-item">
              <div class="contact-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/>
                  <circle cx="12" cy="10" r="3"/>
                </svg>
              </div>
              <div class="contact-details">
                <strong>Address</strong>
                <p>123 Web Street<br />Digital City, DC 12345</p>
              </div>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-body">
            <h3>Office Hours</h3>
            <div class="hours-list">
              <div class="hours-item">
                <span class="day">Monday - Friday</span>
                <span class="time">9:00 AM - 6:00 PM</span>
              </div>
              <div class="hours-item">
                <span class="day">Saturday</span>
                <span class="time">10:00 AM - 4:00 PM</span>
              </div>
              <div class="hours-item">
                <span class="day">Sunday</span>
                <span class="time">Closed</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Footer -->
  <footer slot="footer" class="footer-content">
    <div class="footer-simple">
      <p>&copy; 2024 Platform. All rights reserved.</p>
    </div>
  </footer>
</Layout>

<style>
  .contact-hero {
    text-align: center;
    padding: var(--space-24) 0 var(--space-16);
  }
  
  .page-title {
    font-size: var(--font-size-5xl);
    margin-bottom: var(--space-6);
  }
  
  .page-description {
    font-size: var(--font-size-xl);
    color: var(--text-secondary);
    max-width: 600px;
    margin: 0 auto;
    line-height: var(--line-height-relaxed);
  }
  
  .contact-layout {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: var(--space-12);
    padding-bottom: var(--space-24);
  }
  
  .contact-form-section h2 {
    font-size: var(--font-size-2xl);
    margin-bottom: var(--space-6);
  }
  
  .contact-form {
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
  }
  
  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-4);
  }
  
  .form-actions {
    display: flex;
    gap: var(--space-4);
    justify-content: flex-start;
    padding-top: var(--space-4);
  }
  
  .contact-info {
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
  }
  
  .contact-info h3 {
    font-size: var(--font-size-xl);
    margin-bottom: var(--space-6);
  }
  
  .contact-item {
    display: flex;
    gap: var(--space-4);
    margin-bottom: var(--space-6);
    align-items: flex-start;
  }
  
  .contact-item:last-child {
    margin-bottom: 0;
  }
  
  .contact-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    background-color: var(--color-primary-100);
    color: var(--color-primary-600);
    border-radius: var(--radius-base);
    flex-shrink: 0;
  }
  
  .contact-details strong {
    display: block;
    font-weight: var(--font-weight-semibold);
    margin-bottom: var(--space-1);
    color: var(--text-primary);
  }
  
  .contact-details p {
    color: var(--text-secondary);
    margin: 0;
    line-height: var(--line-height-relaxed);
  }
  
  .hours-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-3);
  }
  
  .hours-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-2) 0;
    border-bottom: 1px solid var(--border-primary);
  }
  
  .hours-item:last-child {
    border-bottom: none;
  }
  
  .day {
    font-weight: var(--font-weight-medium);
    color: var(--text-primary);
  }
  
  .time {
    color: var(--text-secondary);
  }
  
  .footer-simple {
    text-align: center;
    padding: var(--space-8) 0;
    color: var(--text-tertiary);
    font-size: var(--font-size-sm);
  }
  
  @media (max-width: 768px) {
    .contact-hero {
      padding: var(--space-16) 0 var(--space-12);
    }
    
    .page-title {
      font-size: var(--font-size-3xl);
    }
    
    .page-description {
      font-size: var(--font-size-lg);
    }
    
    .contact-layout {
      grid-template-columns: 1fr;
      gap: var(--space-8);
    }
    
    .form-row {
      grid-template-columns: 1fr;
    }
    
    .form-actions {
      flex-direction: column;
    }
    
    .contact-item {
      flex-direction: column;
      text-align: center;
    }
    
    .contact-icon {
      align-self: center;
    }
  }
</style>

<script>
  // Form validation
  const form = document.querySelector('.contact-form') as HTMLFormElement;
  const inputs = form.querySelectorAll('input, textarea');
  
  // Add validation on form submit
  form.addEventListener('submit', (e) => {
    e.preventDefault();
    
    let isValid = true;
    
    inputs.forEach((input) => {
      const field = input as HTMLInputElement | HTMLTextAreaElement;
      const errorSpan = document.getElementById(`${field.id}-error`);
      
      if (field.hasAttribute('required') && !field.value.trim()) {
        field.classList.add('input-error');
        if (errorSpan) {
          errorSpan.removeAttribute('hidden');
        }
        isValid = false;
      } else {
        field.classList.remove('input-error');
        if (errorSpan) {
          errorSpan.setAttribute('hidden', '');
        }
      }
      
      // Email validation
      if (field.type === 'email' && field.value.trim()) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value)) {
          field.classList.add('input-error');
          if (errorSpan) {
            errorSpan.textContent = 'Please enter a valid email address';
            errorSpan.removeAttribute('hidden');
          }
          isValid = false;
        }
      }
    });
    
    if (isValid) {
      // Here you would normally submit the form
      alert('Thank you for your message! We\'ll get back to you soon.');
      form.reset();
    }
  });
  
  // Clear errors on input
  inputs.forEach((input) => {
    input.addEventListener('input', () => {
      const field = input as HTMLInputElement | HTMLTextAreaElement;
      const errorSpan = document.getElementById(`${field.id}-error`);
      
      if (field.value.trim()) {
        field.classList.remove('input-error');
        if (errorSpan) {
          errorSpan.setAttribute('hidden', '');
        }
      }
    });
  });
</script>