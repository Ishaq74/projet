---
// Avatar atom component - 3 variants
export interface Props {
  variant?: 'circular' | 'rounded' | 'square';
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
  src?: string;
  alt?: string;
  name?: string;
  status?: 'online' | 'offline' | 'away' | 'busy';
  class?: string;
}

const {
  variant = 'circular',
  size = 'md',
  src,
  alt,
  name = '',
  status,
  class: className = '',
} = Astro.props;

const classes = [
  'avatar',
  `avatar--${variant}`,
  `avatar--${size}`,
  status && 'avatar--with-status',
  className
].filter(Boolean).join(' ');

// Generate initials from name
const initials = name
  .split(' ')
  .map(word => word.charAt(0))
  .join('')
  .substring(0, 2)
  .toUpperCase();

// Generate a consistent color based on name
const getAvatarColor = (name: string) => {
  const colors = [
    'var(--color-primary-500)',
    'var(--color-secondary-500)',
    'var(--color-accent-500)',
    'var(--color-info-500)',
    'var(--color-success-500)',
    'var(--color-warning-500)',
  ];
  let hash = 0;
  for (let i = 0; i < name.length; i++) {
    hash = name.charCodeAt(i) + ((hash << 5) - hash);
  }
  return colors[Math.abs(hash) % colors.length];
};

const avatarStyle = !src && name ? `background-color: ${getAvatarColor(name)}; color: white;` : '';
---

<div class={classes} style={avatarStyle}>
  {src ? (
    <img src={src} alt={alt || `Avatar for ${name}`} class="avatar__image" />
  ) : name ? (
    <span class="avatar__initials">{initials}</span>
  ) : (
    <svg class="avatar__placeholder" viewBox="0 0 24 24" fill="currentColor">
      <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
    </svg>
  )}
  
  {status && (
    <span class={`avatar__status avatar__status--${status}`} aria-label={`Status: ${status}`}></span>
  )}
</div>

<style>
  .avatar {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background-color: var(--color-neutral-200);
    color: var(--color-neutral-600);
    font-weight: var(--font-weight-medium);
    overflow: hidden;
    flex-shrink: 0;
    user-select: none;
  }

  /* Size variants */
  .avatar--xs {
    width: var(--size-6);
    height: var(--size-6);
    font-size: var(--font-size-xs);
  }

  .avatar--sm {
    width: var(--size-8);
    height: var(--size-8);
    font-size: var(--font-size-sm);
  }

  .avatar--md {
    width: var(--size-10);
    height: var(--size-10);
    font-size: var(--font-size-base);
  }

  .avatar--lg {
    width: var(--size-12);
    height: var(--size-12);
    font-size: var(--font-size-lg);
  }

  .avatar--xl {
    width: var(--size-16);
    height: var(--size-16);
    font-size: var(--font-size-xl);
  }

  .avatar--2xl {
    width: var(--size-20);
    height: var(--size-20);
    font-size: var(--font-size-2xl);
  }

  /* Shape variants */
  .avatar--circular {
    border-radius: var(--radius-full);
  }

  .avatar--rounded {
    border-radius: var(--radius-lg);
  }

  .avatar--square {
    border-radius: var(--radius-md);
  }

  /* Image */
  .avatar__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Placeholder icon */
  .avatar__placeholder {
    width: 60%;
    height: 60%;
  }

  /* Initials */
  .avatar__initials {
    font-weight: var(--font-weight-semibold);
    line-height: 1;
  }

  /* Status indicator */
  .avatar__status {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 25%;
    height: 25%;
    border-radius: var(--radius-full);
    border: 2px solid var(--bg-surface);
    box-shadow: var(--shadow-sm);
  }

  .avatar--xs .avatar__status,
  .avatar--sm .avatar__status {
    width: 8px;
    height: 8px;
    border-width: 1px;
  }

  .avatar--md .avatar__status {
    width: 10px;
    height: 10px;
  }

  .avatar--lg .avatar__status {
    width: 12px;
    height: 12px;
  }

  .avatar--xl .avatar__status,
  .avatar--2xl .avatar__status {
    width: 16px;
    height: 16px;
  }

  /* Status colors */
  .avatar__status--online {
    background-color: var(--color-success-500);
  }

  .avatar__status--offline {
    background-color: var(--color-neutral-400);
  }

  .avatar__status--away {
    background-color: var(--color-warning-500);
  }

  .avatar__status--busy {
    background-color: var(--color-error-500);
  }

  /* Dark theme adjustments */
  [data-theme="dark"] .avatar {
    background-color: var(--color-neutral-700);
    color: var(--color-neutral-300);
  }

  /* Hover effect for interactive avatars */
  .avatar:hover {
    transform: scale(1.05);
    transition: var(--transition-transform);
  }
</style>