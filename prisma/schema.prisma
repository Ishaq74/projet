// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  emailVerified     Boolean       @default(false)
  emailVerifiedAt   DateTime?
  username          String?       @unique
  firstName         String?
  lastName          String?
  avatar            String?
  bio               String?
  role              Role          @default(USER)
  isActive          Boolean       @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Authentication
  sessions          Session[]
  accounts          Account[]
  emailVerifications EmailVerification[]
  passwordResets    PasswordReset[]

  // Blog relations
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  reactions         Reaction[]

  // Organization relations
  organizationMembers OrganizationMember[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Organization {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  members     OrganizationMember[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           OrgRole      @default(MEMBER)
  joinedAt       DateTime     @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model Category {
  id           String @id @default(cuid())
  name         String
  slug         String @unique
  description  String?
  color        String?
  icon         String?
  locale       String
  translationId String? // Links to other language versions
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts        Post[]

  @@map("categories")
}

model Tag {
  id        String @id @default(cuid())
  name      String
  slug      String @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     PostTag[]

  @@map("tags")
}

model Post {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  description     String?
  content         String      @db.Text
  excerpt         String?
  coverImage      String?
  ogImage         String?
  status          PostStatus  @default(DRAFT)
  featured        Boolean     @default(false)
  locale          String
  translationId   String?     // Links to other language versions
  seoTitle        String?
  seoDescription  String?
  viewCount       Int         @default(0)
  likeCount       Int         @default(0)
  commentCount    Int         @default(0)
  
  authorId        String
  categoryId      String
  
  publishedAt     DateTime?
  scheduledAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  author          User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category        Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  tags            PostTag[]
  comments        Comment[]
  likes           Like[]
  reactions       Reaction[]

  @@map("posts")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String        @id @default(cuid())
  content   String        @db.Text
  status    CommentStatus @default(PENDING)
  parentId  String?       // For threaded comments
  postId    String
  authorId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentThread", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentThread")

  @@map("comments")
}

model Like {
  id       String @id @default(cuid())
  postId   String
  userId   String
  createdAt DateTime @default(now())

  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}

model Reaction {
  id       String      @id @default(cuid())
  type     ReactionType
  postId   String
  userId   String
  createdAt DateTime   @default(now())

  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type])
  @@map("reactions")
}

enum Role {
  USER
  ADMIN
}

enum OrgRole {
  MEMBER
  ADMIN
  OWNER
}

enum PostStatus {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  ANGRY
  SAD
  SURPRISED
}